<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oppo.cloud.portal.dao.FlinkTaskDiagnosisExtendMapper">
    <resultMap id="generalViewNumberMap" type="com.oppo.cloud.portal.domain.realtime.GeneralViewNumberDto">
        <result column="base_task_cnt_sum" jdbcType="INTEGER" property="baseTaskCntSum"/>
        <result column="exception_task_cnt_sum" jdbcType="INTEGER" property="exceptionTaskCntSum"/>
        <result column="resource_task_cnt_sum" jdbcType="INTEGER" property="resourceTaskCntSum"/>
        <result column="total_core_num_sum" jdbcType="INTEGER" property="totalCoreNumSum"/>
        <result column="total_mem_num_sum" jdbcType="INTEGER" property="totalMemNumSum"/>
        <result column="cut_core_num_sum" jdbcType="INTEGER" property="cutCoreNumSum"/>
        <result column="cut_mem_num_sum" jdbcType="INTEGER" property="cutMemNumSum"/>
        <result column="dt" jdbcType="VARCHAR" property="date"/>
    </resultMap>

    <select id="getDiagnosisTime" parameterType="com.oppo.cloud.portal.domain.realtime.DiagnosisGeneralViewQuery" resultType="java.time.LocalDateTime">
        select max(diagnosis_end_time) as diagnosis_end_time from flink_task_diagnosis where diagnosis_from = 0 and
        <![CDATA[ diagnosis_end_time >= #{startTs} and diagnosis_end_time <= #{endTs} ]]>
    </select>

    <select id="getGeneralViewNumber" parameterType="com.oppo.cloud.portal.domain.realtime.DiagnosisGeneralViewQuery" resultMap="generalViewNumberMap">
        select
        sum(base_task_cnt) as base_task_cnt_sum,
        sum(exception_task_cnt) as exception_task_cnt_sum,
        sum(resource_task_cnt) as resource_task_cnt_sum,
        sum(total_core_num) as total_core_num_sum,
        sum(total_mem_num) as total_mem_num_sum,
        sum(cut_core_num) as cut_core_num_sum,
        sum(cut_mem_num) as cut_mem_num_sum,
        #{endTs} as dt
        from
        (
        select 1 as base_task_cnt,
        case when (diagnosis_resource_type like '%4,%' or diagnosis_resource_type like '%4]%')
        then 1 else 0 end as exception_task_cnt,
        case when ( diagnosis_resource_type like '%2,%' or diagnosis_resource_type like '%2]%'
        or diagnosis_resource_type like '%3,%' or diagnosis_resource_type like '%3]%')
        then 1 else 0 end as resource_task_cnt,
        tm_core * tm_num as total_core_num,
        tm_mem * tm_num as total_mem_num,
        case when ( diagnosis_resource_type like '%2,%' or diagnosis_resource_type like '%2]%')
        then tm_core * tm_num - diagnosis_tm_core_num * diagnosis_tm_num else 0 end as cut_core_num,
        case when ( diagnosis_resource_type like '%3,%' or diagnosis_resource_type like '%3]%')
        then tm_mem * tm_num - diagnosis_tm_mem_size * diagnosis_tm_num else 0 end as cut_mem_num,
        FROM_UNIXTIME( #{endTs} , '%Y-%m-%d' ) as dt
        from flink_task_diagnosis
        where diagnosis_from = 0 and
        <![CDATA[ diagnosis_end_time >= #{startTs} and diagnosis_end_time <= #{endTs} ]]>
        ) a
    </select>
    <select id="getDiagnosisDates" parameterType="com.oppo.cloud.portal.domain.realtime.DiagnosisGeneralViewQuery" resultType="java.time.LocalDateTime">
        select distinct diagnosis_end_time from flink_task_diagnosis where diagnosis_from = 0 and
        <![CDATA[ diagnosis_end_time >= #{startTs} and diagnosis_end_time <= #{endTs} ]]>
    </select>
    <select id="getGeneralViewTrend"  resultMap="generalViewNumberMap">
        select
        sum(base_task_cnt) as base_task_cnt_sum,
        sum(exception_task_cnt) as exception_task_cnt_sum,
        sum(resource_task_cnt) as resource_task_cnt_sum,
        sum(total_core_num) as total_core_num_sum,
        sum(total_mem_num) as total_mem_num_sum,
        sum(cut_core_num) as cut_core_num_sum,
        sum(cut_mem_num) as cut_mem_num_sum,
        dt
        from (
        select 1 as base_task_cnt,
        job_name,
        diagnosis_end_time,
        case when (diagnosis_resource_type like '%4,%' or diagnosis_resource_type like '%4]%')
        then 1 else 0 end as exception_task_cnt,
        case when ( diagnosis_resource_type like '%2,%' or diagnosis_resource_type like '%2]%'
        or diagnosis_resource_type like '%3,%' or diagnosis_resource_type like '%3]%')
        then 1 else 0 end as resource_task_cnt,
        tm_core * tm_num as total_core_num,
        tm_mem * tm_num as total_mem_num,
        case when ( diagnosis_resource_type like '%2,%' or diagnosis_resource_type like '%2]%')
        then tm_core * tm_num - diagnosis_tm_core_num * diagnosis_tm_num else 0 end as cut_core_num,
        case when ( diagnosis_resource_type like '%3,%' or diagnosis_resource_type like '%3]%')
        then tm_mem * tm_num - diagnosis_tm_mem_size * diagnosis_tm_num else 0 end as cut_mem_num,
        DATE_FORMAT( diagnosis_end_time , '%Y-%m-%d' ) as dt
        from flink_task_diagnosis where diagnosis_from = 0 and
        diagnosis_end_time in
        <foreach item="item" collection="diagnosisEndTimes" open="(" separator="," close=")">
            #{item}
        </foreach>
            ) a group by dt
    </select>

    <select id="page" parameterType="com.oppo.cloud.portal.domain.realtime.DiagnosisAdviceListReq"
            resultMap="com.oppo.cloud.mapper.FlinkTaskDiagnosisMapper.BaseResultMap">
        select
        <include refid="com.oppo.cloud.mapper.FlinkTaskDiagnosisMapper.Base_Column_List" />
        from flink_task_diagnosis
        <trim prefix="where (" prefixOverrides="and" suffix=")">
            <if test="projectName != null and projectName!=''">
                and project_name=#{projectName}
            </if>
            <if test="flowName != null and flowName != ''">
                and flow_name=#{flowName}
            </if>
            <if test="taskName != null and taskName != ''">
                and task_name=#{taskName}
            </if>
            <if test="startTs != null and startTs != 0">
                <![CDATA[  and diagnosis_end_time>=from_unixtime(#{startTs}) ]]>
            </if>
            <if test="endTs != null and endTs != 0">
                <![CDATA[  and diagnosis_end_time<=from_unixtime(#{endTs}) ]]>
            </if>
            <if test="username != null and username != ''">
                <![CDATA[  and username=#{username} ]]>
            </if>
            <if test="applicationId != null and applicationId != ''">
                <![CDATA[  and application_id=#{applicationId} ]]>
            </if>
            <if test="diagnosisFrom != null and diagnosisFrom != ''">
                and diagnosis_from in
                <foreach close=")" collection="diagnosisFrom" item="listItem" open="(" separator=",">
                    #{listItem}
                </foreach>
            </if>
            <if test="diagnosisRule != null and diagnosisRule.size()!=0">
                and
                <foreach close=")" collection="diagnosisRule" item="listItem" open="(" separator=" or ">
                    json_contains(diagnosis_types,"${listItem}")
                </foreach>
            </if>
            <if test="diagnosisRuleNe != null and diagnosisRuleNe.size()!=0">
                and
                <foreach close=")" collection="diagnosisRuleNe" item="listItem" open="(" separator=" and ">
                    !json_contains(diagnosis_types,"${listItem}")
                </foreach>
            </if>

            <if test="resourceDiagnosisType != null and resourceDiagnosisType.size()!=0">
                and
                <foreach close=")" collection="resourceDiagnosisType" item="listItem" open="(" separator=" or ">
                    json_contains(diagnosis_resource_type,"${listItem}")
                </foreach>
            </if>
            <if test="resourceDiagnosisTypeNe != null and resourceDiagnosisTypeNe.size()!=0">
                and
                <foreach close=")" collection="resourceDiagnosisTypeNe" item="listItem" open="(" separator=" and ">
                    !json_contains(diagnosis_resource_type,"${listItem}")
                </foreach>
            </if>

        </trim>
        order by diagnosis_end_time desc
        <if test="orderColumn != null and orderType != null">
             ,#{orderColumn} #{orderType}
        </if>
    </select>
</mapper>

