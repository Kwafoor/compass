server:
  port: 7078

spring:
  application:
    name: task-gpt
  datasource:
    #    url: jdbc:mysql://localhost:33066/compass?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
    url: jdbc:mysql://10.52.60.134:33066/diagnose_data?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
    username: collation
    password: gcUHBQoCw6L15MY_x8OberqmRzSSGHxA-igEgwqmycg_Y6HyC3EIz7Qir4vAoKzi
    druid:
      initial-size: 5
      min-idle: 10
      max-active: 20
  kafka:
    #    bootstrap-servers: "localhost:9095"
    bootstrap-servers: "ht-diagnose-task-kafka.global.yyyvmc.kafka.oppo.local:9095,ht-diagnose-task-kafka.global.yyyqmc.kafka.oppo.local:9095,ht-diagnose-task-kafka.global.yyycmc.kafka.oppo.local:9095"
    match-consumer:
      topics: "exception-log"
      group-id: "cp-task-gpt-match"
      auto:
        start: false
    aggregate-consumer:
      topics: "drain-log"
      group-id: "cp-task-gpt-aggregate"

  opensearch:
    nodes: localhost:9200
    username:
    password:
    truststore:
    truststore-password:
  jackson: # serialize & deserialize time zone.
    time-zone: Asia/Shanghai

mybatis:
  mapper-locations:
    - classpath:dao/*.xml
    - classpath*:com/**/mapper/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

# drain config for aggregating log.
drain:
  maskPrefix: "<:"
  maskSuffix: ":>"
  similarityThreshold: 0.7 # similarity between two tokens.
  maxDepth: 15 # max depth of prefix tree.
  maxChildren: 1000 # max children in the save level of prefix tree
  maxClusters: 10000 # max templates, -1 is unlimited
  maxTokens: 50 # max token limit, -1 is unlimited
  delimiters: [ ]
  maskRules:
    - regex: "((?<=[^A-z0-9])|^)((hdfs|cfs|file):)?/?(/[A-z0-9!_.=/*-]+)((?=['\"\\s,])|$)"  # 'hdfs://directory/file'
      maskWith: "FILE"
    - regex: "(`[A-z0-9_]+`\\.?){2,}" # `db`.`table`
      maskWith: "TABLE"
    - regex: "application_\\d+_\\d+"
      maskWith: "APPID"
    - regex: "((?<=[^A-Za-z0-9])|^)(?![0-9]+(\\.?\\s|\\.?$))(?![A-z]+(\\.?\\s|\\.?$))([0-9A-z-]+)((?=\\.?\\s)|\\.?$)" #  f22f56ae-8de5-4752-823b-752ae77f7caa
      maskWith: "SEQ"
    - regex: "((?<=[^A-Za-z0-9])|^)(([0-9a-f]{2,}:){3,}([0-9a-f]{2,}))((?=[^A-z0-9])|$)"
      maskWith: "ID"
    - regex: "((?<=[^A-Za-z0-9])|^)(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})((?=[^A-z0-9])|$)"
      maskWith: "IP"
    - regex: "((?<=[^A-Za-z0-9])|^)(0x[a-f0-9A-F]+)((?=[^A-z0-9])|$)"
      maskWith: "HEX"
    - regex: "((?<=[^A-Za-z0-9])|^)([\\-\\+]?\\d+)((?=[^A-z0-9])|$)"
      maskWith: "NUM"

# cron for reloading template aggregated by drain, which is in db.
template:
  reload:
    cron: "*/10 * * * * ?"
